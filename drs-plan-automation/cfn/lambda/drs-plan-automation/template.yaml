# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Step function to automate DRS recovery plan

Globals:
  Function:
#    Timeout: 3
    Tracing: Active
#  Api:
#    TracingEnabled: True

Parameters:
  Memory:
    Description: Memory to allocate to Lambda function
    Type: Number
    Default: 128
  env:
    Type: String
  DrsAssumeRoleName:
    Description: The name of the AWS IAM role in DRS accounts allowing the solution to perform AWS operations in the account (e.g. DRS recovery, SSM Automation initiation)
    Type: String
    Default: "drs-plan-automation-account-role"


Resources:
  DRSPlanAutomationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "drs-plan-automation-${env}"
      CodeUri: src/
      Handler: drs_automation_plan.handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt DRSPlanAutomationFunctionRole.Arn
      MemorySize: !Ref Memory
      Timeout: 600
      Environment:
        Variables:
          DRS_ASSUME_ROLE_NAME: !Sub "${DrsAssumeRoleName}-${env}"
          DRS_APPLICATION_TABLE_NAME:
            Fn::ImportValue: !Sub "drs-plan-automation-applications-table-name-${env}"
          DRS_RESULTS_TABLE_NAME:
            Fn::ImportValue: !Sub "drs-plan-automation-plan-results-table-name-${env}"
          DRS_EXECUTION_TABLE_NAME:
            Fn::ImportValue: !Sub "drs-plan-automation-plan-execution-table-name-${env}"
          DRS_APPLICATION_S3_BUCKET:
            !Sub "drs-s3-plan-automation-${AWS::AccountId}-${AWS::Region}"

  DRSPlanAutomationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt DRSPlanAutomationStateMachineRole.Arn
      Definition:
        Comment: Automate the restoration of DRS source servers based on provided order and
          wait times.
        StartAt: StartDRSPlan
        States:
          StartDRSPlan:
            ItemsPath: "$.Applications"
            Iterator:
              StartAt: InitiateWavePlan
              States:
                ApplicationCompleted:
                  OutputPath: "$.Payload"
                  Parameters:
                    FunctionName: !GetAtt DRSPlanAutomationFunction.Arn
                    Payload.$: "$"
                  Resource: arn:aws:states:::lambda:invoke
                  Retry:
                    - BackoffRate: 2
                      ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                      IntervalSeconds: 2
                      MaxAttempts: 6
                  Type: Task
                  Next: ApplicationSucceeded
                ApplicationSucceeded:
                  Type: Succeed
                DetermineActionsState:
                  Choices:
                    - And:
                        - Variable: "$.result.status"
                          IsPresent: true
                        - Variable: "$.result.status"
                          StringEquals: failed
                      Next: ApplicationFailed
                    - And:
                        - Variable: "$.result.status"
                          IsPresent: true
                        - Variable: "$.result.status"
                          StringEquals: timeout
                      Next: ApplicationTimeout
                    - And:
                        - IsPresent: true
                          Variable: "$.application.all_actions_completed"
                        - BooleanEquals: true
                          Variable: "$.application.all_actions_completed"
                      Next: DetermineWavePlanState
                    - And:
                        - IsPresent: true
                          Variable: "$.application.action_completed"
                        - BooleanEquals: false
                          Variable: "$.application.action_completed"
                      Next: WaitForActionUpdate
                  Type: Choice
                DetermineWavePlanState:
                  Choices:
                    - And:
                        - Variable: "$.result.status"
                          IsPresent: true
                        - Variable: "$.result.status"
                          StringEquals: failed
                      Next: ApplicationFailed
                    - And:
                        - IsPresent: true
                          Variable: "$.application.all_actions_completed"
                        - BooleanEquals: false
                          Variable: "$.application.all_actions_completed"
                      Next: DetermineActionsState
                    - And:
                        - IsPresent: true
                          Variable: "$.application.all_waves_completed"
                        - BooleanEquals: false
                          Variable: "$.application.all_waves_completed"
                      Next: DetermineWaveState
                    - And:
                        - IsPresent: true
                          Variable: "$.application.all_waves_completed"
                        - BooleanEquals: true
                          Variable: "$.application.all_waves_completed"
                      Next: ApplicationCompleted
                  Type: Choice
                DetermineWaveState:
                  Choices:
                    - And:
                        - Variable: "$.result.status"
                          IsPresent: true
                        - Variable: "$.result.status"
                          StringEquals: failed
                      Next: ApplicationFailed
                    - And:
                        - IsPresent: true
                          Variable: "$.application.all_waves_completed"
                        - BooleanEquals: true
                          Variable: "$.application.all_waves_completed"
                      Next: ApplicationCompleted
                    - And:
                        - IsPresent: true
                          Variable: "$.application.wave_completed"
                        - BooleanEquals: false
                          Variable: "$.application.wave_completed"
                      Next: WaitForWaveUpdate
                    - And:
                        - IsPresent: true
                          Variable: "$.application.wave_completed"
                        - BooleanEquals: true
                          Variable: "$.application.wave_completed"
                      Next: DetermineWavePlanState
                  Type: Choice
                InitiateWavePlan:
                  Next: DetermineWavePlanState
                  OutputPath: "$.Payload"
                  Parameters:
                    FunctionName:   !GetAtt DRSPlanAutomationFunction.Arn
                    Payload.$: "$"
                  Resource: arn:aws:states:::lambda:invoke
                  Retry:
                    - BackoffRate: 2
                      ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                      IntervalSeconds: 2
                      MaxAttempts: 6
                  Type: Task
                UpdateActionStatus:
                  Next: DetermineActionsState
                  OutputPath: "$.Payload"
                  Parameters:
                    FunctionName:  !GetAtt DRSPlanAutomationFunction.Arn
                    Payload.$: "$"
                  Resource: arn:aws:states:::lambda:invoke
                  Retry:
                    - BackoffRate: 2
                      ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                      IntervalSeconds: 2
                      MaxAttempts: 6
                  Type: Task
                UpdateWaveStatus:
                  Next: DetermineWaveState
                  OutputPath: "$.Payload"
                  Parameters:
                    FunctionName: !GetAtt DRSPlanAutomationFunction.Arn
                    Payload.$: "$"
                  Resource: arn:aws:states:::lambda:invoke
                  Retry:
                    - BackoffRate: 2
                      ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                      IntervalSeconds: 2
                      MaxAttempts: 6
                  Type: Task
                WaitForActionUpdate:
                  Next: UpdateActionStatus
                  SecondsPath: "$.application.current_action_update_time"
                  Type: Wait
                WaitForWaveUpdate:
                  Next: UpdateWaveStatus
                  SecondsPath: "$.application.current_wave_update_time"
                  Type: Wait
                ApplicationFailed:
                  Type: Fail
                ApplicationTimeout:
                  Type: Fail
            Parameters:
              action: begin
              execution.$: "$$.Execution.Id"
              execution_details.$: "$$.Map.Item.Value"
              isdrill.$: "$.IsDrill"
              topic_arn.$: "$.TopicARN"
              user.$: "$.user"
            ResultPath: "$.application_results"
            Type: Map
            End: true


  DRSPlanAutomationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "drs-plan-automation-lambda-${env}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "drs-plan-automation-lambda-policy-${env}"
      Roles:
        - Ref: DRSPlanAutomationFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Resource:
              - !Sub "arn:aws:iam::*:role/${DrsAssumeRoleName}-${env}"
          - Sid: LogOutput
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: DRSPlanAutomationFunction
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - Fn::ImportValue: !Sub "drs-plan-automation-plan-results-table-arn-${env}"
              - Fn::Join:
                  - "/"
                  - - Fn::ImportValue: !Sub "drs-plan-automation-plan-results-table-arn-${env}"
                    - index/*          
          - Sid: "S3BucketAccess"
            Effect: "Allow"
            Action: 
              -  s3:Get*
              -  s3:DeleteObject
              -  s3:PutBucketVersioning
              -  s3:PutObject
            Resource: 
              - !Sub "arn:aws:s3:::drs-s3-plan-automation-${AWS::AccountId}-${AWS::Region}"
              - !Sub "arn:aws:s3:::drs-s3-plan-automation-${AWS::AccountId}-${AWS::Region}/*"
        


  DRSPlanAutomationStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "drs-plan-automation-statemachine-${env}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName:  !Sub "drs-plan-automation-statemachine-policy-${env}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt DRSPlanAutomationFunction.Arn



Outputs:
  DRSPlanAutomationStateMachineArn:
    Value: !Ref DRSPlanAutomationStateMachine
    Description: "DRS Plan Automation State Machine Arn"
    Export:
      Name: !Sub "drs-plan-automation-state-machine-arn-${env}"